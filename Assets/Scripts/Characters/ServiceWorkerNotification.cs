// –§–∞–π–ª: ServiceWorkerNotification.cs
using UnityEngine;
using TMPro;

[RequireComponent(typeof(ServiceWorkerController))]
public class ServiceWorkerNotification : MonoBehaviour
{
    private ServiceWorkerController parent;
    private TextMeshPro notificationText;

    void Start()
    {
        parent = GetComponent<ServiceWorkerController>();
        notificationText = GetComponentInChildren<TextMeshPro>();
        if (parent == null || notificationText == null) 
        { 
            enabled = false;
        }
    }

    void Update()
    {
        if (notificationText == null || parent == null) return;
        
        // --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –º—ã —Å–Ω–æ–≤–∞ –≤—ã–∑—ã–≤–∞–µ–º GetCurrentState(), –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π enum ---
        var state = parent.GetCurrentState();
        notificationText.text = GetStateText(state);
        notificationText.color = GetStateColor(state);
    }

    private string GetStateText(ServiceWorkerController.WorkerState state)
    {
        bool useEmoji = NotificationStyleManager.useEmojiStyle;
        switch (state)
        {
            case ServiceWorkerController.WorkerState.Idle:
                return useEmoji ? "üëÄ" : "S"; // –ò—â–µ—Ç —Ä–∞–±–æ—Ç—É
            case ServiceWorkerController.WorkerState.GoingToMess:
            case ServiceWorkerController.WorkerState.Cleaning:
                return useEmoji ? "üßπ" : "C"; // –£–±–∏—Ä–∞–µ—Ç
            case ServiceWorkerController.WorkerState.GoingToToilet:
            case ServiceWorkerController.WorkerState.AtToilet:
                return useEmoji ? "üòñ" : "!"; // –í —Ç—É–∞–ª–µ—Ç–µ
            case ServiceWorkerController.WorkerState.StressedOut:
                return useEmoji ? "üò°" : "!!!"; // –í —Å—Ä—ã–≤–µ
            case ServiceWorkerController.WorkerState.OffDuty:
                return useEmoji ? "üòî" : "*"; // –°–º–µ–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
            default:
                return "...";
        }
    }
    
    private Color GetStateColor(ServiceWorkerController.WorkerState state)
    {
        switch (state)
        {
            case ServiceWorkerController.WorkerState.Cleaning:
            case ServiceWorkerController.WorkerState.GoingToMess:
                return Color.green;
            case ServiceWorkerController.WorkerState.AtToilet:
            case ServiceWorkerController.WorkerState.GoingToToilet:
                return Color.yellow;
            case ServiceWorkerController.WorkerState.StressedOut:
                return Color.red;
            default:
                return Color.white;
        }
    }
}